<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mural de Luz</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.4/p5.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body>
    
    <script type="module">
        // Importaciones de Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getFirestore, collection, onSnapshot, deleteDoc, doc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Configuración de Firebase ---
        const firebaseConfig = {
           apiKey: "AIzaSyCz_du9pqA8Uye_Sgm4baekxg7ldqGRGko",
           authDomain: "instalacionmariposas.firebaseapp.com",
           projectId: "instalacionmariposas",
           storageBucket: "instalacionmariposas.firebasestorage.app",
           messagingSenderId: "79329581996",
           appId: "1:79329581996:web:a1fa70f3292025b85d3809",
           measurementId: "G-CK7RWVZS20"
        };

        // ===============================================================
        // INICIO DEL CÓDIGO DE ANIMACIÓN P5.JS
        // ===============================================================
        const sketch = (p) => {
            let particles = [];
            let shootingStars = [];
            let starfield = [];
            let pulses = [];
            let sparks = [];
            let joiningParticles = []; // Partículas doradas que se unen al corazón

            const colorPalette = [
                [255, 255, 255],
                [200, 220, 255],
                [255, 250, 200]
            ];

            class Particle {
                constructor(x, y) {
                    this.home = p.createVector(x, y);
                    this.pos = p.createVector(p.random(p.width), p.random(p.height));
                    this.vel = p.createVector(0, 0);
                    this.acc = p.createVector(0, 0);
                    this.maxSpeed = p.random(1, 4);
                    this.maxForce = 0.2;
                    const baseColor = p.random(colorPalette);
                    this.color = p.color(...baseColor, 200);
                    this.glowColor = p.color(...baseColor, 100);
                    this.size = p.random(1.5, 4);
                    this.baseLife = 1.0;
                    this.life = this.baseLife;
                }

                applyForce(force) { this.acc.add(force); }

                update() {
                    let seek = this.seek(this.home);
                    this.applyForce(seek);

                    let noiseForce = p5.Vector.fromAngle(p.noise(this.pos.x * 0.005, this.pos.y * 0.005, p.frameCount * 0.005) * p.TWO_PI * 4);
                    noiseForce.mult(0.15);
                    this.applyForce(noiseForce);

                    this.vel.add(this.acc);
                    this.vel.limit(this.maxSpeed);
                    this.pos.add(this.vel);
                    this.acc.mult(0);

                    if (this.life > this.baseLife) {
                        this.life -= 0.03;
                    } else {
                        this.life = this.baseLife;
                    }
                }

                seek(target) {
                    let desired = p5.Vector.sub(target, this.pos);
                    let d = desired.mag();
                    let speed = this.maxSpeed;
                    if (d < 150) { speed = p.map(d, 0, 150, 0, this.maxSpeed); }
                    desired.setMag(speed);
                    let steer = p5.Vector.sub(desired, this.vel);
                    steer.limit(this.maxForce);
                    return steer;
                }

                draw() {
                    let currentSize = this.size * this.life;
                    p.noStroke();
                    p.fill(this.glowColor);
                    p.ellipse(this.pos.x, this.pos.y, currentSize * 2.5);
                    p.fill(this.color);
                    p.ellipse(this.pos.x, this.pos.y, currentSize);
                }
                
                pulse(intensity) {
                    this.life = this.baseLife + intensity;
                    let pushForce = p5.Vector.sub(this.pos, p.createVector(p.width / 2, p.height / 2));
                    pushForce.setMag(intensity * 0.5);
                    this.applyForce(pushForce);
                }
            }

            class ShootingStar {
                constructor() {
                    if (p.random(1) > 0.5) { this.pos = p.createVector(p.random(p.width), p.random([0, p.height])); } 
                    else { this.pos = p.createVector(p.random([0, p.width]), p.random(p.height)); }
                    this.target = p.createVector(p.width / 2, p.height / 2);
                    this.vel = p5.Vector.sub(this.target, this.pos).normalize().mult(p.random(5, 8));
                    this.size = p.random(8, 12);
                    this.trail = [];
                    this.color = p.color(255, 255, 220);
                }

                update() {
                    this.trail.push(this.pos.copy());
                    if (this.trail.length > 30) { this.trail.shift(); }
                    this.pos.add(this.vel);
                }

                draw() {
                    for (let i = 0; i < this.trail.length; i++) {
                        let pos = this.trail[i];
                        let alpha = p.map(i, 0, this.trail.length, 0, 150);
                        let size = this.size * (i / this.trail.length);
                        p.fill(p.red(this.color), p.green(this.color), p.blue(this.color), alpha);
                        p.noStroke();
                        p.ellipse(pos.x, pos.y, size);
                    }
                    p.fill(this.color);
                    p.ellipse(this.pos.x, this.pos.y, this.size);
                }

                isOffscreen() { return p.dist(this.pos.x, this.pos.y, this.target.x, this.target.y) < 20; }
            }
            
            class Pulse {
                constructor() {
                    this.pos = p.createVector(p.width / 2, p.height / 2);
                    this.radius = 0;
                    this.maxRadius = p.width * 0.4;
                    this.speed = 15;
                    this.life = 255;
                }

                update() {
                    this.radius += this.speed;
                    this.life -= 10;
                    for (let particle of particles) {
                        let d = p.dist(this.pos.x, this.pos.y, particle.pos.x, particle.pos.y);
                        if (d > this.radius - 20 && d < this.radius + 20) {
                            particle.pulse(2.0);
                        }
                    }
                }

                draw() {
                    p.noFill();
                    p.stroke(255, 255, 255, this.life);
                    p.strokeWeight(3);
                    p.ellipse(this.pos.x, this.pos.y, this.radius * 2);
                }
            }

            class Spark {
                constructor(x, y) {
                    this.pos = p.createVector(x, y);
                    
                    const t = p.random(p.TWO_PI);
                    const r = p.pow(p.random(1), 0.5); 

                    const heartX = r * (16 * p.pow(p.sin(t), 3));
                    const heartY = r * -(13 * p.cos(t) - 5 * p.cos(2 * t) - 2 * p.cos(3 * t) - p.cos(4 * t));
                    
                    let heartVec = p.createVector(heartX, heartY);

                    const noiseAmount = 3;
                    heartVec.add(p5.Vector.random2D().mult(p.random(noiseAmount)));

                    this.vel = heartVec;
                    this.vel.mult(p.random(0.6, 0.9));

                    this.lifespan = 255;
                    this.age = 0;
                    this.color = p.random([p.color('#FF48C4'), p.color('#2BD1FF'), p.color('#F8FF20'), p.color('#FF0101'), p.color('#00FF7F')]);
                }

                isDead() {
                    return this.lifespan < 0;
                }

                update() {
                    this.age++;
                    if (this.age < 180) {
                        this.vel.mult(0.98);
                    } else {
                        this.lifespan -= 5;
                    }
                    this.pos.add(this.vel);
                    this.lifespan -= 1.0; 
                }

                draw() {
                    p.noStroke();
                    p.fill(p.red(this.color), p.green(this.color), p.blue(this.color), this.lifespan);
                    p.ellipse(this.pos.x, this.pos.y, 3);
                }
            }

            class JoiningParticle {
                constructor(x, y) {
                    this.pos = p.createVector(x, y);
                    this.vel = p5.Vector.random2D().mult(2);
                    this.acc = p.createVector(0, 0);
                    this.home = p.random(particles).home.copy();
                    // *** CAMBIO: Reducción de velocidad y fuerza para un movimiento más lento ***
                    this.maxSpeed = 0.8; 
                    this.maxForce = 0.02;
                    this.color = p.color(255, 223, 0, 255);
                    this.glowColor = p.color(255, 223, 0, 150);
                    this.size = 6;
                }

                applyForce(force) { this.acc.add(force); }

                seek(target) {
                    let desired = p5.Vector.sub(target, this.pos);
                    let d = desired.mag();
                    let speed = this.maxSpeed;
                    if (d < 100) { speed = p.map(d, 0, 100, 0, this.maxSpeed); }
                    desired.setMag(speed);
                    let steer = p5.Vector.sub(desired, this.vel);
                    steer.limit(this.maxForce);
                    return steer;
                }

                update() {
                    let seek = this.seek(this.home);
                    this.applyForce(seek);
                    this.vel.add(this.acc);
                    this.vel.limit(this.maxSpeed);
                    this.pos.add(this.vel);
                    this.acc.mult(0);
                }

                draw() {
                    p.noStroke();
                    p.fill(this.glowColor);
                    p.ellipse(this.pos.x, this.pos.y, this.size * 2);
                    p.fill(this.color);
                    p.ellipse(this.pos.x, this.pos.y, this.size);
                }

                hasArrived() {
                    return p.dist(this.pos.x, this.pos.y, this.home.x, this.home.y) < 4;
                }
            }


            const createHeartParticles = () => {
                particles = [];
                const numParticles = 1500;
                const heartScale = p.min(p.width, p.height) * 0.03;
                for (let i = 0; i < numParticles; i++) {
                    let t = p.random(p.TWO_PI);
                    let x = 16 * p.pow(p.sin(t), 3);
                    let y = -(13 * p.cos(t) - 5 * p.cos(2 * t) - 2 * p.cos(3 * t) - p.cos(4 * t));
                    
                    let homeX = p.width / 2 + x * heartScale;
                    let homeY = p.height / 2 + y * heartScale * 1.1;

                    const thickness = 15;
                    const offset = p5.Vector.random2D().mult(p.random(thickness));
                    homeX += offset.x;
                    homeY += offset.y;

                    particles.push(new Particle(homeX, homeY));
                }
            };

            p.createShootingStar = () => { shootingStars.push(new ShootingStar()); };

            p.setup = () => {
                p.createCanvas(p.windowWidth, p.windowHeight);
                for (let i = 0; i < 500; i++) {
                    starfield.push({
                        x: p.random(p.width),
                        y: p.random(p.height),
                        size: p.random(0.5, 2),
                        alpha: p.random(50, 150)
                    });
                }
                createHeartParticles();
            };

            p.draw = () => {
                p.background(5, 5, 15);

                p.noStroke();
                for (const star of starfield) {
                    p.fill(255, star.alpha * (p.sin(p.frameCount * 0.01 + star.x) * 0.5 + 0.5));
                    p.ellipse(star.x, star.y, star.size);
                }

                let beat = p.sin(p.frameCount * 0.04) * 0.08 + 1.0;
                
                for (let particle of particles) {
                    let center = p.createVector(p.width / 2, p.height / 2);
                    let scaledHome = p5.Vector.sub(particle.home, center);
                    scaledHome.mult(beat);
                    scaledHome.add(center);
                    particle.seek(scaledHome);
                    particle.update();
                    particle.draw();
                }

                for (let i = shootingStars.length - 1; i >= 0; i--) {
                    let star = shootingStars[i];
                    star.update();
                    star.draw();
                    if (star.isOffscreen()) {
                        pulses.push(new Pulse());
                        for (let j = 0; j < 3200; j++) {
                            sparks.push(new Spark(star.target.x, star.target.y));
                        }
                        joiningParticles.push(new JoiningParticle(star.target.x, star.target.y));
                        shootingStars.splice(i, 1);
                    }
                }
                
                for (let i = pulses.length - 1; i >= 0; i--) {
                    let pulse = pulses[i];
                    pulse.update();
                    pulse.draw();
                    if (pulse.life <= 0) {
                        pulses.splice(i, 1);
                    }
                }

                for (let i = sparks.length - 1; i >= 0; i--) {
                    let spark = sparks[i];
                    spark.update();
                    spark.draw();
                    if (spark.isDead()) {
                        sparks.splice(i, 1);
                    }
                }

                for (let i = joiningParticles.length - 1; i >= 0; i--) {
                    let joiner = joiningParticles[i];
                    joiner.update();
                    joiner.draw();
                    if (joiner.hasArrived()) {
                        let newPermParticle = new Particle(joiner.home.x, joiner.home.y);
                        newPermParticle.pos = joiner.pos.copy();
                        newPermParticle.color = p.color(255, 255, 255, 255);
                        particles.push(newPermParticle);
                        joiningParticles.splice(i, 1);
                    }
                }
            };
            
            p.windowResized = () => {
                p.resizeCanvas(p.windowWidth, p.windowHeight);
                createHeartParticles();
            };
        };

        let p5_instance = new p5(sketch);

        // ===============================================================
        // CONEXIÓN CON FIREBASE
        // ===============================================================
        try {
            const app = initializeApp(firebaseConfig);
            const db = getFirestore(app);
            const messagesCollectionRef = collection(db, "mural-de-luz-mensajes");

            onSnapshot(messagesCollectionRef, (snapshot) => {
                snapshot.docChanges().forEach((change) => {
                    if (change.type === "added") {
                        console.log("¡Mensaje Recibido! Creando estrella fugaz...");
                        if (p5_instance && p5_instance.createShootingStar) {
                            p5_instance.createShootingStar();
                        }
                        deleteDoc(doc(db, "mural-de-luz-mensajes", change.doc.id));
                    }
                });
            });
            console.log("Conectado a Firebase. Escuchando mensajes...");
        } catch (error) {
            console.error("Error al inicializar Firebase en el Mural:", error);
        }
    </script>
</body>
</html>
